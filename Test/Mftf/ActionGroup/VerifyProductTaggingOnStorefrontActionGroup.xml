<?xml version="1.0" encoding="UTF-8"?>
<!-- Product meta field in Magento/Catalog/Test/Mftf/Metadata/product-meta.xml -->
<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/actionGroupSchema.xsd">
    <actionGroup name="CheckProductPage">
        <arguments>
            <argument name="product"/>
        </arguments>
        <amOnPage url="/{{product.custom_attributes[url_key]}}.html" stepKey="amOnSimpleProductPage"/>
        <seeInCurrentUrl url="/{{product.custom_attributes[url_key]}}.html" stepKey="checkUrl"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>

        <assertElementContainsAttribute selector=".nosto_product" attribute="style" expectedValue="display: none;" stepKey="assertContainsNostoClass"/>
        <seeElementInDOM selector=".nosto_product > .name" stepKey="seeElementInDOM1"/>
        <!-- The element needs to be visible in order to have its value extracted -->
        <executeJS function="jQuery('.notranslate').removeAttr('style');" stepKey="showNoTranslateDiv"/>
        <executeJS function="jQuery('.nosto_product').removeAttr('style');" stepKey="showNostoProductDiv"/>
        <waitForElementVisible selector=".nosto_product > .name" time="5" stepKey="waitForNostoProductElementToBeVisible"/>

        <grabTextFrom selector=".nosto_product > .name" stepKey="stepGrabTextFromNostoProductName"/>
        <assertEquals message="Product Name" stepKey="assertEqualsProductName">
            <expectedResult type="string">{{product.name}}</expectedResult>
            <actualResult type="string">{$stepGrabTextFromNostoProductName}</actualResult>
        </assertEquals>

        <grabTextFrom selector=".nosto_product > .product_id" stepKey="stepGrabTextFromNostoProductId"/>
        <assertEquals message="Product Id" stepKey="assertEqualsProductId">
            <expectedResult type="string">{{product.id}}</expectedResult>
            <actualResult type="string">{$stepGrabTextFromNostoProductId}</actualResult>
        </assertEquals>

        <grabTextFrom selector=".nosto_product > .price" stepKey="stepGrabTextFromNostoProductPrice"/>
        <assertEquals message="Price" stepKey="assertProductPrice">
            <expectedResult type="string">{{product.price}}</expectedResult>
            <actualResult type="string">{$stepGrabTextFromNostoProductPrice}</actualResult>
        </assertEquals>

    </actionGroup>
</actionGroups>
